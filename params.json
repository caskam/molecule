{"name":"Molecule","tagline":"A Rack inspired web micro-framework for easy and fun Java Web Development","body":"## Quick Start\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) throws IOException {\r\n        WebServer server = WebServer.create();\r\n        server.start((request, response) -> response.done(\"Hello, World\"));\r\n    }\r\n}\r\n```\r\n\r\nAccess your application at:\r\n\r\n`http://localhost:8080`\r\n\r\n## Download \r\n\r\nYou can get the latest release version from Maven Central:\r\n\r\n```xml\r\n<dependency>\r\n      <groupId>com.vtence.molecule</groupId>\r\n      <artifactId>molecule</artifactId>\r\n      <version>0.9</version>\r\n</dependency>\r\n```\r\n \r\nIf you want the development version, grab the latest snapshot from Sonatype snapshots repositories \r\n(```https://oss.sonatype.org/content/repositories/snapshots```):\r\n\r\n```xml\r\n<dependency>\r\n      <groupId>com.vtence.molecule</groupId>\r\n      <artifactId>molecule</artifactId>\r\n      <version>0.10-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nTo use the default web server, you also need to add [Simple](http://www.simpleframework.org) as a dependency:\r\n\r\n```xml\r\n<dependency>\r\n      <groupId>org.simpleframework</groupId>\r\n      <artifactId>simple-http</artifactId>\r\n      <version>6.0.1</version>\r\n</dependency>\r\n```\r\n\r\n## Want to start with some code?\r\n\r\nTry out the following examples:\r\n\r\n* [Hello World](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/helloworld/HelloWorldExample.java)\r\n* [Rendering HTML](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/simple/SimpleExample.java)\r\n* [Dynamic Routes](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/routing/RoutingExample.java)\r\n* [Static Files](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/files/StaticFilesExample.java)\r\n* [REST](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/rest/RESTExample.java)\r\n* [Asynchronous Processing](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/async/AsyncExample.java)\r\n* [Cookies](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/cookies/CookiesExample.java)\r\n* [Locale Negotiation](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/locale/LocaleNegotiationExample.java)\r\n* [Multipart Forms](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/multipart/MultipartExample.java)\r\n* [View Templates and Layout](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/templating/TemplatingAndLayoutExample.java)\r\n* [HTTP Sessions](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/session/SessionExample.java)\r\n* [Multiple Applications](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/multiapps/MultiAppsExample.java)\r\n* [Filters](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/filtering/FilteringExample.java)\r\n* [Creating a Custom Middleware](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/middleware/CustomMiddlewareExample.java)\r\n* [Caching and Compression](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/performance/CachingAndCompressionExample.java)\r\n* [SSL](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/ssl/SSLExample.java)\r\n* [A Sample Application](https://github.com/testinfected/simple-petstore/blob/master/webapp/src/main/java/org/testinfected/petstore/PetStore.java)\r\n\r\n## Getting Started\r\n\r\nFirst thing first, you need a server to run your app:\r\n\r\n```java\r\nWebServer server = WebServer.create();\r\n```\r\n\r\nThis will set the default web server, which is powered by [Simple](http://www.simpleframework.org), \r\nto run locally on port 8080.\r\n\r\nTo start the server, give it an app:\r\n\r\n```java\r\nserver.start((request, response) -> response.done(\"Hello, World!\"));\r\n```\r\n\r\nTo stop the server, call the _stop_ method:\r\n\r\n```java\r\nserver.stop()\r\n```\r\n\r\nYou can optionally specify the interface and port to bound to when creating the server, e.g. if you want to make your server globally available:\r\n\r\n```java\r\nWebServer server = WebServer.create(\"0.0.0.0\", 8088);\r\n```\r\n\r\n## Asynchronous Processing\r\n\r\nMolecule, uses [Simple](http://www.simpleframework.org) as a default webserver. Both are fully asynchronous and non-blocking. \r\nThis allows the server to scale to very high loads and handle as many concurrent connections as possible, even when depending \r\non a high latency external resource.\r\n         \r\nWhat this means is you can serve your response content from a thread separate to the original servicing thread. For instance your application \r\nmight need to wait for some remote process that takes some time to complete, such as an HTTP or SOAP request to an external server. You can simply \r\ncall this external resource from a different thread, and complete the response when you get the result.\r\n\r\nTo tell the server that you're ready to serve the response, call the _done_ method on the response \r\n(see [Asynchronous Processing](#asynchronous-processing)).\r\n\r\nLook at the [Asynchronous example](https://github.com/testinfected/molecule/blob/master/src/test/java/examples/async/AsyncExample.java)\r\nto see how to serve content from a separate thread.\r\n\r\n\r\n## Routing\r\n\r\nMost modern webapps have nice URLs. Simple URLs are also easier to remember and more user friendly. \r\n\r\nMolecule comes with a routing middleware that let you define your URL routes. \r\n\r\nRoutes let you map incoming requests to different applications based on the request verb and path. A route is composed\r\nof a path pattern, an optional set of verbs to match, and an application endpoint: \r\n\r\n```java\r\nserver.start(new DynamicRoutes() {{\r\n    get(\"/posts/:id\").to((request, response) -> {\r\n        // retrieve a given post\r\n    });\r\n    post(\"/posts\").to((request, response) -> {\r\n        // create a new post\r\n    }); \r\n    put(\"/posts/:id\").to((request, response) -> {\r\n        // update an existing post\r\n    });\r\n    delete(\"/posts/:id\").to((request, response) -> {\r\n        // delete a post\r\n    }); \r\n    map(\"/\").to((request, response) -> {\r\n        // show the home page\r\n    });\r\n}});\r\n```\r\n### Matching\r\n\r\nRoutes are matched in the order they are defined. If not defined route matches, the default behaviour is to \r\nrender a 404 Not Found. This can be configured to pass the control to any default application.\r\n\r\nBy default, a route matches a single verb, specified by the method you use, i.e. _get_, _post_, _put_, _delete_.\r\nThat can be changed by providing the verbs as arguments to the _via_ method:\r\n\r\n```java\r\nmap(\"/\").via(GET, HEAD).to((request, response) -> {\r\n    // show the home page\r\n});\r\n```\r\n\r\nIf you don't provide any verbs, _map_ will match on all verbs.\r\n\r\n### Dynamic Parameters\r\n\r\nRoute patterns can be matched exactly - they are said to be static - or can include named parameters,\r\n which are then accessible as regular request parameters on the request object:\r\n\r\n```java\r\n// matches \"GET /photos/18\" and \"GET /photos/25\"\r\n// request.parameter(\"id\") is either '18' or '25'\r\nget(\"/photos/:id\", (request, response) -> {\r\n    response.done(\"Photo #\" + request.parameter(\"id\"));\r\n});\r\n```\r\n\r\n### Custom Matching\r\n\r\nYou are not limited to the provided match patterns. You can easily implement your own matcher and decide exactly how to match an incoming url to an application.\r\n\r\nTo do this, use the route definition methods that accept a _Matcher_ rather than a _String_.\r\n\r\n\r\n## Working with the Request\r\n\r\n### Request Object\r\n\r\n### Attributes\r\n\r\n## Working with the Response\r\n\r\n### Response Object\r\n\r\n### Bodies\r\n\r\n### Redirection and Errors\r\n\r\n## Cookies\r\n\r\n## Sessions\r\n\r\n## Rendering Templates\r\n\r\n## View Layouts\r\n\r\n## Testing\r\n\r\n## Middlewares\r\n\r\nMiddlewares are a way to enhance your application with optional building blocks, using a pipeline design. \r\n\r\nThey implement functionality you tend to need across all your applications,\r\nbut you don't want to build everytime. Things like **access logging**, **authentication**, \r\n**compression**, **static files**, **routing**, etc. \r\n\r\nBeing able to separate the processing of the request (and post-processing of the response) in different stages \r\nhas several benefits:\r\n\r\n* It separate concerns, which helps keep your design clean and application well-structured\r\n* It let you only include the functionality you need, so your server is as small and fast as possible \r\n* It let you plug in your own processing stages, to customize the behavior of your application\r\n* It let you reuse and share middlewares, as elemental building blocks of application behavior\r\n\r\nFor example you could have the following separate stages of the pipeline doing:\r\n\r\n1. Capturing internal server errors to render a nice 500 page\r\n1. Monitoring, logging accesses to the server\r\n1. Authentication and authorisation, to control access to your applicatin\r\n1. Caching, returning a cached result if request has already been processed recently\r\n1. Compression, to reduce bandwith usage\r\n1. Security, to prevent attacks such as CSRF\r\n1. Processing, to actually process the request\r\n\r\n### Available Middlewares\r\n\r\nMolecule comes with a number of middlewares (more are coming), that you can use to build your processing pipeline:\r\n\r\n* Router (See [Routing](#routing))\r\n* Static Assets \r\n* File Server\r\n* Access Log\r\n* Cookies\r\n* Locale Negotiation\r\n* Compression\r\n* ETag\r\n* Conditional Get\r\n* Connection Scope\r\n* Server Header\r\n* Date Header\r\n* Content-Length Header\r\n* Filter Map\r\n* URL Map\r\n* Cookie Session Tracker\r\n* Fail Safe\r\n* Failure Monitor\r\n* Not Found\r\n* Http Method Override\r\n* Layout\r\n\r\n","google":"UA-16545808-2","note":"Don't delete this file! It's used internally to help with page regeneration."}